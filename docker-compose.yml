version: '3.8'

services:
  client:
    container_name: instantchat-client
    build:
      context: ../InstantChat-Client
    ports:
      - "3000:3000"
    networks:
      - instantchat-network
    depends_on:
      - server
    restart: unless-stopped

  server:
    container_name: instantchat-server
    build:
      context: .
      dockerfile: /Dockerfile
    env_file: .env
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - instantchat-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
  
  postgres:
    image: postgres:17.4-alpine
    container_name: instantchat-postgres
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/resources/init-schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./src/resources/test-data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      - instantchat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: instantchat-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - instantchat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  instantchat-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: